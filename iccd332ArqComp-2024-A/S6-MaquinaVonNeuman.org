#+options: H:2
#+latex_class: beamer
#+columns: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+beamer_theme: Madrid
#+beamer_color_theme:
#+beamer_font_theme:
#+beamer_inner_theme:
#+beamer_outer_theme:
#+beamer_header:


#+options: ':nil *:t -:t ::t <:t H:2 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: Máquina de Von Neumann
#+date: 2024-06-04 Tue
#+author: Lenin G. Falconí
#+email: lenin.falconi@epn.edu.ec
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.3)

* Conceptualización de Von Neumann
** Conceptos de Diseño
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks
   :END:
- Los datos y las instrucciones se almacenan en una memoria principal
  de lectura/escritura
- Los contenidos de la memoria son accesibles por medio de su
  ubicación y son independientes del contenido o tipo de dato
  almacenado
- La ejecución ocurre de manera secuencial (aunque puede ser
  modificado explícitamente e.g. una instrucción de salto)
- El mismo hardware puede desarrollar diferentes funciones sobre los
  datos dependiendo de las señales de control aplicadas
- El programa, conjunto de códigos de instrucciones y datos, indica
  las señales de control requeridas.
- La programación usa el mismo hardware pero diferentes códigos para
  diferentes propósitos.

* Ciclo de Captación y ejecución
** Ciclo de Captación, decodificación y ejecución

   [[./images/vonNeumancycle.png]]

** Proceso de Captación
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks
   :END:

- El contador de programa $PC$ apunta a la siguiente instrucción
- El contenido del contador de programa se transfiere al $MAR$ (Memory
  Addresds Register)
- $MAR$ tiene la dirección de memoria desde donde se leerá
  datos/instrucciones o hacia donde se escribirá.
- En un ciclo de lectura, el contenido apuntado por $MAR$ se
  transfiere al $MBR$ Memory Buffer Register
- La instrucción se pasa del $MBR$ al $IR$ (instruction register),
  donde se decodifica en el /opcode/ y la dirección del dato.
- La CPU ejecuta la instrucción.

\newpage
- El proceso de captación se puede escribir en notación RTL como:
    1. $[MAR] \leftarrow [PC]$
    2. $[PC] \leftarrow [PC]+1$
    3. $[MBR] \leftarrow [[MAR]]$
    4. $[IR] \leftarrow [MBR]$
    5. $CPU \leftarrow [IR_{opcode}]$

** Ejemplo
   :PROPERTIES:
   :BEAMER_opt: allowframebreaks
   :END:
Considere un computador de las siguientes características:
- Un único registro de acumulación AC
- La memoria es de 16 bits con 4 bits para *opcode* y 12 bits para
  direcciones de la memoria.
- ¿Cuántos Opcodes son posibles de almacenar? 
- ¿Cuántas direcciones se puede alcanzar? 
- El computador tiene el siguiente juego de instrucciones:
    - 0001 Cargar AC desde memoria
    - 0010 Almacenar AC en la memoria
    - 0101 Sumar al AC un dato de memoria



\begin{figure}[ht]
  \centering
  \includegraphics[width=\textwidth, height=.8\textheight]{./images/ejecucionVonNeumanEjemplo.png}
  %\caption{\label{fig:label} }
\end{figure}

** Programa Fetch en Python
#+begin_src python
pc = 0
mem = [0]*16
def fetch(memory):
    global pc
    mar = pc
    pc = pc +1
    mbr = memory[mar]
    ir = mbr
    cu = ir >> 8
    address = ir & 0xFF
    return (cu, address)
#+end_src


